import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  AlertTriangle, ChevronDown, ChevronUp, Eye, FileText,
  Share2, Copy, ExternalLink, Code, Shield, Clock,
  TrendingUp, CheckCircle, XCircle, Info, Terminal,
  Bug, Zap, Database, Globe, Lock, Key
} from 'lucide-react';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';
import toast from 'react-hot-toast';

const EnhancedVulnerabilityCard = ({ vulnerability, onViewDetails, onGeneratePoC }) => {
  const [expanded, setExpanded] = useState(false);
  const [activeTab, setActiveTab] = useState('evidence');

  // Get severity color and icon
  const getSeverityConfig = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'critical':
        return {
          color: 'from-red-500 to-red-600',
          bgColor: 'bg-red-500/10',
          borderColor: 'border-red-500/30',
          textColor: 'text-red-400',
          icon: Zap,
          pulse: true
        };
      case 'high':
        return {
          color: 'from-orange-500 to-orange-600',
          bgColor: 'bg-orange-500/10',
          borderColor: 'border-orange-500/30',
          textColor: 'text-orange-400',
          icon: AlertTriangle,
          pulse: false
        };
      case 'medium':
        return {
          color: 'from-yellow-500 to-yellow-600',
          bgColor: 'bg-yellow-500/10',
          borderColor: 'border-yellow-500/30',
          textColor: 'text-yellow-400',
          icon: Info,
          pulse: false
        };
      case 'low':
        return {
          color: 'from-blue-500 to-blue-600',
          bgColor: 'bg-blue-500/10',
          borderColor: 'border-blue-500/30',
          textColor: 'text-blue-400',
          icon: Shield,
          pulse: false
        };
      default:
        return {
          color: 'from-gray-500 to-gray-600',
          bgColor: 'bg-gray-500/10',
          borderColor: 'border-gray-500/30',
          textColor: 'text-gray-400',
          icon: Bug,
          pulse: false
        };
    }
  };

  // Get vulnerability type icon
  const getTypeIcon = (type) => {
    const typeStr = type?.toLowerCase() || '';
    if (typeStr.includes('sql')) return Database;
    if (typeStr.includes('xss')) return Code;
    if (typeStr.includes('csrf')) return Key;
    if (typeStr.includes('xxe')) return FileText;
    if (typeStr.includes('ssrf')) return Globe;
    if (typeStr.includes('command')) return Terminal;
    if (typeStr.includes('path')) return Lock;
    return Bug;
  };

  const severityConfig = getSeverityConfig(vulnerability.severity);
  const SeverityIcon = severityConfig.icon;
  const TypeIcon = getTypeIcon(vulnerability.type);

  // Copy to clipboard
  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    toast.success('Copied to clipboard!', {
      style: {
        background: '#1f2937',
        color: '#fff',
        border: '1px solid #374151'
      },
      iconTheme: {
        primary: '#8b5cf6',
        secondary: '#fff'
      }
    });
  };

  // Share vulnerability
  const shareVulnerability = () => {
    const shareData = {
      title: `${vulnerability.type} - ${vulnerability.severity}`,
      text: `Found ${vulnerability.type} vulnerability at ${vulnerability.url}`,
      url: window.location.href
    };
    
    if (navigator.share) {
      navigator.share(shareData);
    } else {
      copyToClipboard(JSON.stringify(shareData, null, 2));
      toast.success('Share data copied to clipboard!');
    }
  };

  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className={`bg-gray-900/50 rounded-xl border ${severityConfig.borderColor} overflow-hidden`}
    >
      {/* Header */}
      <div className={`p-6 ${severityConfig.bgColor}`}>
        <div className="flex items-start justify-between">
          <div className="flex items-start space-x-4">
            {/* Severity Badge */}
            <div className="relative">
              <div className={`p-3 rounded-lg bg-gradient-to-br ${severityConfig.color} shadow-lg`}>
                <SeverityIcon className="w-6 h-6 text-white" />
              </div>
              {severityConfig.pulse && (
                <div className="absolute inset-0 rounded-lg bg-red-500 animate-ping opacity-20" />
              )}
            </div>

            {/* Vulnerability Info */}
            <div className="flex-1">
              <div className="flex items-center space-x-3 mb-2">
                <h3 className="text-xl font-bold text-white">{vulnerability.type}</h3>
                <span className={`px-2 py-1 rounded-full text-xs font-semibold ${severityConfig.bgColor} ${severityConfig.textColor}`}>
                  {vulnerability.severity?.toUpperCase()}
                </span>
                {vulnerability.confidence && (
                  <div className="flex items-center space-x-1">
                    <div className="flex space-x-0.5">
                      {[...Array(5)].map((_, i) => (
                        <div
                          key={i}
                          className={`w-1.5 h-4 rounded-full ${
                            i < Math.floor(vulnerability.confidence / 20)
                              ? 'bg-green-500'
                              : 'bg-gray-600'
                          }`}
                        />
                      ))}
                    </div>
                    <span className="text-xs text-gray-400">{vulnerability.confidence}%</span>
                  </div>
                )}
              </div>

              {/* URL and Parameter */}
              <div className="space-y-1">
                <div className="flex items-center space-x-2">
                  <Globe className="w-4 h-4 text-gray-400" />
                  <code className="text-sm text-blue-400 font-mono">
                    {vulnerability.url?.length > 60 
                      ? vulnerability.url.substring(0, 60) + '...' 
                      : vulnerability.url}
                  </code>
                </div>
                {vulnerability.parameter && (
                  <div className="flex items-center space-x-2">
                    <Key className="w-4 h-4 text-gray-400" />
                    <span className="text-sm text-gray-300">
                      Parameter: <code className="text-yellow-400 font-mono">{vulnerability.parameter}</code>
                    </span>
                  </div>
                )}
              </div>

              {/* Timestamp */}
              <div className="flex items-center space-x-2 mt-2">
                <Clock className="w-3 h-3 text-gray-500" />
                <span className="text-xs text-gray-500">
                  Discovered {new Date(vulnerability.timestamp || Date.now()).toLocaleString()}
                </span>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex items-center space-x-2">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setExpanded(!expanded)}
              className="p-2 hover:bg-gray-800 rounded-lg transition-colors"
            >
              {expanded ? (
                <ChevronUp className="w-5 h-5 text-gray-400" />
              ) : (
                <ChevronDown className="w-5 h-5 text-gray-400" />
              )}
            </motion.button>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="flex items-center space-x-2 mt-4">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => onViewDetails(vulnerability)}
            className="px-3 py-1.5 bg-purple-600 hover:bg-purple-700 text-white rounded-lg text-sm font-medium flex items-center space-x-1.5 transition-colors"
          >
            <Eye className="w-4 h-4" />
            <span>View Details</span>
          </motion.button>
          
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => onGeneratePoC(vulnerability)}
            className="px-3 py-1.5 bg-gray-700 hover:bg-gray-600 text-white rounded-lg text-sm font-medium flex items-center space-x-1.5 transition-colors"
          >
            <FileText className="w-4 h-4" />
            <span>Generate PoC</span>
          </motion.button>
          
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={shareVulnerability}
            className="p-1.5 hover:bg-gray-800 rounded-lg transition-colors"
          >
            <Share2 className="w-4 h-4 text-gray-400" />
          </motion.button>
          
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => copyToClipboard(JSON.stringify(vulnerability, null, 2))}
            className="p-1.5 hover:bg-gray-800 rounded-lg transition-colors"
          >
            <Copy className="w-4 h-4 text-gray-400" />
          </motion.button>
        </div>
      </div>

      {/* Expanded Content */}
      <AnimatePresence>
        {expanded && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
            className="border-t border-gray-800"
          >
            {/* Tabs */}
            <div className="flex border-b border-gray-800">
              {['evidence', 'request', 'response', 'remediation'].map((tab) => (
                <button
                  key={tab}
                  onClick={() => setActiveTab(tab)}
                  className={`px-4 py-3 text-sm font-medium capitalize transition-colors ${
                    activeTab === tab
                      ? 'text-purple-400 border-b-2 border-purple-400'
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  {tab}
                </button>
              ))}
            </div>

            {/* Tab Content */}
            <div className="p-6">
              {activeTab === 'evidence' && (
                <div className="space-y-4">
                  <div>
                    <h4 className="text-sm font-semibold text-gray-400 mb-2">Evidence</h4>
                    <div className="bg-gray-800 rounded-lg p-4">
                      <code className="text-sm text-gray-300 font-mono">
                        {vulnerability.evidence || 'No evidence available'}
                      </code>
                    </div>
                  </div>
                  
                  {vulnerability.payload && (
                    <div>
                      <h4 className="text-sm font-semibold text-gray-400 mb-2">Payload Used</h4>
                      <div className="bg-gray-800 rounded-lg p-4">
                        <code className="text-sm text-red-400 font-mono">
                          {vulnerability.payload}
                        </code>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {activeTab === 'request' && (
                <div>
                  <h4 className="text-sm font-semibold text-gray-400 mb-2">HTTP Request</h4>
                  <div className="bg-gray-950 rounded-lg overflow-hidden">
                    <SyntaxHighlighter
                      language="http"
                      style={vscDarkPlus}
                      customStyle={{
                        margin: 0,
                        padding: '1rem',
                        fontSize: '0.875rem'
                      }}
                    >
                      {vulnerability.request || 'GET /vulnerable-endpoint HTTP/1.1\nHost: example.com\nUser-Agent: CyberSage Scanner\n\nNo request data available'}
                    </SyntaxHighlighter>
                  </div>
                </div>
              )}

              {activeTab === 'response' && (
                <div>
                  <h4 className="text-sm font-semibold text-gray-400 mb-2">HTTP Response</h4>
                  <div className="bg-gray-950 rounded-lg overflow-hidden">
                    <SyntaxHighlighter
                      language="http"
                      style={vscDarkPlus}
                      customStyle={{
                        margin: 0,
                        padding: '1rem',
                        fontSize: '0.875rem'
                      }}
                    >
                      {vulnerability.response || 'HTTP/1.1 200 OK\nContent-Type: text/html\n\nNo response data available'}
                    </SyntaxHighlighter>
                  </div>
                </div>
              )}

              {activeTab === 'remediation' && (
                <div className="space-y-4">
                  <div>
                    <h4 className="text-sm font-semibold text-gray-400 mb-2">Recommended Fix</h4>
                    <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                      <p className="text-sm text-gray-300">
                        {vulnerability.remediation || 'Implement proper input validation and output encoding. Follow OWASP guidelines for secure coding practices.'}
                      </p>
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-semibold text-gray-400 mb-2">References</h4>
                    <div className="space-y-2">
                      {vulnerability.references?.map((ref, index) => (
                        <a
                          key={index}
                          href={ref}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex items-center space-x-2 text-sm text-blue-400 hover:text-blue-300"
                        >
                          <ExternalLink className="w-4 h-4" />
                          <span>{ref}</span>
                        </a>
                      )) || (
                        <div className="flex items-center space-x-2 text-sm text-blue-400">
                          <ExternalLink className="w-4 h-4" />
                          <span>OWASP Top 10</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

export default EnhancedVulnerabilityCard;
